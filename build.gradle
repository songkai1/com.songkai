/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'songkai' at '17-6-30 下午1:07' with Gradle 2.8
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.8/userguide/tutorial_java_projects.html
 */

 //设置脚本的运行环境     
 buildscript {
 	ext {
        springBootVersion = '1.3.5.RELEASE'
    }
    repositories {
        maven { url 'http://repository.rfddc.com/nexus/content/groups/public/' }
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/'}
        maven { url 'http://maven.oschina.net/content/groups/public/' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
        classpath('io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE')
        classpath "ru.trylogic.gradle.plugins:gradle-thrift-plugin:0.1.1"
    }
 }


// Apply the java plugin to add support for Java
//声明当前构建的是什么
apply plugin: 'thrift'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot' 
apply plugin: 'io.spring.dependency-management' 


//定义生成的Jar文件的名字
jar {
    baseName = 'songkai-gradle'
    version =  '0.1.0'
    
    from('src/main/resource') {
        include '**'
    }
    from('src/main/resource') {
        include 'config/**/*.xml'
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

// In this section you declare where to find the dependencies of your project
//用来定义第三方库的来源
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
     maven { url 'http://repository.rfddc.com/nexus/content/groups/public/' }
    mavenCentral()
    maven { url 'https://plugins.gradle.org/m2/'}
    flatDir {
        dirs 'lib'
    }
}

configurations {
    providedRuntime
    driver
    compile.exclude module: 'spring-boot-starter-tomcat'
}

// In this section you declare the dependencies for your production and test code
//依赖包  
dependencies {
    //compile 'org.slf4j:slf4j-api:1.7.12'
	compile('org.springframework:spring-context:4.2.0.RELEASE')
	compile('org.springframework.boot:spring-boot-starter-jetty')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-jdbc')
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    
    compile('org.springframework.boot:spring-boot-starter-redis')
    
    //compile('org.springframework.cloud:spring-cloud-netflix-hystrix-dashboard')
    //compile('org.springframework.cloud:spring-cloud-starter-eureka-server')

    //compile('de.codecentric:spring-boot-admin-server:1.3.3')
    //compile('de.codecentric:spring-boot-admin-server-ui:1.3.3')
    
    compile('com.github.pagehelper:pagehelper:4.1.6')
    compile('com.github.jsqlparser:jsqlparser:0.9.5')
    
    compile('org.mybatis:mybatis:3.3.1')
    compile('org.mybatis:mybatis-spring:1.2.5')
    compile('com.alibaba:druid:1.0.18')
    compile('org.apache.poi:poi:3.12')
    compile('com.fasterxml.jackson.core:jackson-annotations:2.8.9')
    compile('com.fasterxml.jackson.core:jackson-core:2.8.9')
    compile('org.apache.mina:mina-core:2.0.9')
    compile('org.apache.mina:mina-transport-apr:2.0.9')
    compile('org.apache.mina:mina-transport-serial:2.0.9')
    compile('org.bidib.jbidib.org.qbang.rxtx:rxtxcomm:2.2')
    
    compile('io.springfox:springfox-swagger2:2.4.0')
    compile('io.springfox:springfox-swagger-ui:2.4.0')
    
    compile("org.apache.commons:commons-lang3:3.4")
    
	compile("com.google.guava:guava:19.0")
	compile("org.aspectj:aspectjweaver:1.8.2")
	compile('com.alibaba:fastjson:1.2.13')
	
	compile group: 'org.apache.zookeeper', name: 'zookeeper', version: '3.3.6'
	
	compile('mysql:mysql-connector-java')	
	compile fileTree(dir:'lib',include:'*.jar')
	
    testCompile("junit:junit")
}

eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

/*
Gradle Wrapper是开始一个Gradle构建的首选方式。
它包含了windows批处理以及OS X和Linux的Shell脚本。
这些脚本允许我们在没有安装Gradle的系统上执行Gradle构建。
*/
task wrapper(type: Wrapper) {
    gradleVersion = '2.8'
}
